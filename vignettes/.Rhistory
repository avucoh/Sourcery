getwd()
setwd("~/")
getwd()
devtools::create("nPOD")
devtools::create_package("nPOD")
usethis::create_package("nPOD")
setwd("~/HIRN/Sourcery")
devtools::load_all()
setwd("~/HIRN/Sourcery/inst/Curated/Abs/Checked")
pmids <- gsub("[^0-9]", "", list.files())
authors <- PMID2Authors(pmids = pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x$Name, function(y) grep(y, HIRNauthors)), use.names = F))
names(whichHIRN) <- pmids
# Check if any are missing
which(sapply(whichHIRN, length) == 0)
# Use indices to get canonical IDs
HIRN <- whichHIRN
whichHIRN_id <- lapply(whichHIRN, function(ai) sapply(ai, function(id) Persons[[id]]$CanonicalId))
library(RISmed)
pmids <- gsub("[^0-9]", "", list.files())
authors <- PMID2Authors(pmids = pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x$Name, function(y) grep(y, HIRNauthors)), use.names = F))
names(whichHIRN) <- pmids
# Check if any are missing
which(sapply(whichHIRN, length) == 0)
whichHIRN
# Use indices to get canonical IDs
HIRN <- whichHIRN
whichHIRN_id <- lapply(whichHIRN, function(ai) sapply(ai, function(id) Persons[[id]]$CanonicalId))
test <- fread("PMID27732837_abs.txt")
test <- apply(test, 1, as.list)
test[[1]]
ab2json(test[[1]])
apikey <- "68eec80e-dc68-4081-af9a-5adc332ef6a3"
ab_temp <- getResourceTestSubmission(apikey = apikey)
ab_temp
ab_temp <- content(ab_temp)
str(ab_temp)
ab_temp <- ab_temp[[1]]
ab_temp
ab_temp <- getResourceTestSubmission(apikey = apikey)
ab_temp <- content(ab_temp)
names(ab_temp)
ab_temp <- ab_temp$AntibodyResources
ab_temp
ab_temp <- ab_temp[[1]]
names(ab_temp)
ab2json(test[[1]])
CVs <- getCodedValues(apikey)
CVs <- content(CVs)
ab2json(test[[1]])
setwd("~/HIRN/Sourcery/vignettes")
write(test, "test.json")
writeJSON(test, "test.json")
test
testjson <- ab2json(test[[1]])
write(test, "test.json")
write(testjson, "test.json")
status_code(getApplicationTestSubmission(apikey))
status_code(getAppSchema(apikey))
content(getAppSchema(apikey))
appschema <- content(getAppSchema(apikey))
toJSON(appschema)
jsonlite::toJSON(appschema)
jsonlite::toJSON(appschema, pretty = T)
