))
)
runApp('nPOD/nPOD-App/DIVE')
removeUI("#matchUI", immediate = T)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
fluidPage(fluidRow(
column(1,
br(),
actionButton("guideMatch", "Guide", icon = icon("info-circle"))
),
column(1,
h3("CohortX"),
helpText("(your cohort)")
),
column(2,
div(id = "cohortInput",
textInput("cohortName", "Your cohort name/label (optional)", value = "", placeholder = "e.g. 'DiViD', 'pilot'.."),
fileInput("cohortDataUpload",  HTML("<strong>Upload data to begin</strong>"), multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv"),
buttonLabel = "Data")
)
),
column(1,
br(),
checkboxInput("outsideCohort", "non-nPOD cohort", value = T),
br(),
br(),
actionLink("cohortDataRequirements", icon = icon("exclamation"), "Data requirements")
),
column(1
),
column(6
)),
fluidRow(
column(1
),
column(1, style="border-top: 1px solid lightgray;",
br(),
h3("nPOD")
),
column(2, style="border-top: 1px solid lightgray;",
br(),
div(id = "nPODInput",
selectInput("matchType", "Type of matches to get from nPOD",
choices = list("No diabetes (negative control)" = c(`No-diabetes donors` = "ND"),
"T1D (positive control)" = c(`T1D donors` = "T1D"),
"Other" = c(`T2D donors` = "T2D", `Autoantibody-positive donors` = "AAb")))
)
),
column(2),
column(6,
div(id = "npodgraph", style="margin-top: -220px; z-index: 0; height: 500px;", plotlyOutput("npodgraph")),
div(style="position: absolute; margin-top: -200px; margin-left: -140px; top:0; left:0; z-index: 1;",
plotlyOutput("nPie"))
)),
fluidRow(
column(1),
column(11, style="padding-top: 20px;",
uiOutput("matchUI")
)
),
fluidRow(style="margin-top: 20px; padding-bottom: 50px;",
column(5, style="padding-right: 50px;",
uiOutput("matchResult")
),
column(3,
uiOutput("advancedMatchResult")
),
column(4,
uiOutput("advancedMatchResult2")
)
)
)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
ggplot()
library(ggplot)
library(ggplot2)
ggplot()
load("~/Documents/Met/wgcna.Rdata")
shiny::runApp('nPOD/nPOD-App/app')
runApp('nPOD/nPOD-App/app')
max(c(NA, 1, 2, 3))
NA > 5
NA >= 5
1:5[c(NA, 3, 5)]
c(NA, 3, 5, 3, 4, 5) > 3
test <- data.frame(x = 1:3, y = 3:1)
ggplot(test) + geom_point()
runApp('nPOD/nPOD-App/Test-dev/match')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
setwd("~/HIRN/Sourcery/data")
devtools::load_all()
devtools::load_all()
HIRNauthors <- sapply(Persons, function(x) paste(x$LastName, x$FirstName))
HIRNauthors[HIRNauthors == "Powers Al"] <- "Powers Alvin"
usethis::use_data(HIRNauthors)
setwd("~/HIRN/Data/2018")
dt <- fread("Ds2.csv")
pmids <- as.character(dt$DefiningManuscriptId)
authors <- PMID2Authors(pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x$Name, function(y) grep(y, HIRNauthors))))
lengths(whichHIRN)
as.logical(lengths(whichHIRN))
whichHIRN[[1]]
names(whichHIRN)
whichHIRN[[2]]
setwd("~/HIRN/Sourcery")
devtools::load_all()
system.file("extdata/Curated/Ds.txt". package = "Sourcery")
system.file("extdata/Curated/Ds.txt", package = "Sourcery")
system.file("Curated/Ds.txt", package = "Sourcery")
devtools::load_all()
export <- ds2json_batch()
fromJSON("http://dev-resourcebrowser2.azurewebsites.net/api/v1.0/AdminResource/GetNew/Proteomics")
fromJSON("http://dev-resourcebrowser2.azurewebsites.net/api/v1.0/AdminResource/GetNew/Cellomics")
fromJSON("https://dev-resourcebrowser2.azurewebsites.net/api/v1.0/AdminResource/GetNew/Cellomics")
fromJSON("https://dev-resourcebrowser2.azurewebsites.net/api/v1.0/AdminResource/GetNew/Proteomics")
RCurl::getURL("http://dev-resourcebrowser2.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset")
RCurl::getURL("http://dev-resourcebrowser2.azurewebsites.net/api/v1.0/Schema/GetSchema/Service?resourceType=Technology")
devtools::load_all()
export <- ds2json_batch()
head(Cellosaurus)
OBI
get(OBI)[1. ]
get(OBI)[1, ]
eval(OBI)[1, ]
quote(OBI)
quote(OBI)[1, ]
ds2json <- function(d, dsjson, dscat, batch, sep = "|", CV = codedValues) {
new <- dsjson
new$TechnologyType <- map2O(id = d$OBI_ERO)
new$BiosampleCharacteristics <- c(lapply(unlist(strsplit(d$GOTerm, sep)), function(x) map2O(name = x, "GO")),
lapply(unlist(strsplit(d$DOIDTerm, sep)), function(x) map2O(name = x, "DOID")))
new$BiosampleType <- c(lapply(unlist(strsplit(d$CellTissue, sep)), function(x) map2O(name = x, ontology = "CL")),
lapply(unlist(strsplit(d$CellLine, sep)), function(x) map2O(name = x, ontology = "CVCL")),
lapply(unlist(strsplit(d$Species, sep)), map2O(name = x, ontology = "NCBITAXON")))
new$DatasetValue$Name <- as.character(d$Value)
new$Description <- d$Description
new$Contributors <- map2Person(d$DefiningManuscriptId, "Producer")
new$PrimaryResourceType <- resourceTypes$ResourceTypes[[2]][resourceSchema]
new$SecondaryResourceType <- dcat[[match(d$Category, c("Epigenomics", "Genomics", "Metabolomics", "Proteomics", "Transcriptomics", "Cellomics"))]]
new$CurationStatus <- CV$CodedValuesByType$CurationStatus[[1]]
new$DefiningManuscriptId <- d$DefiningManuscriptId
new$id <- UUIDgenerate()
new$CanonicalId <- d$ACC
new$Url <- d$URL
new$Name <- d$Name
new$DateCreated <- format_iso_8601(Sys.time())
new$SystemType <- d$Category
new$BatchNumber <- batch
toJSON(new, pretty = T, null = "null", na = "null", auto_unbox = T)
}
devtools::load_all()
export <- ds2json_batch()
dt$OBI
export <- ds2json_batch()
setwd("~/HIRN/Sourcery/inst/Curated")
fread("Ds.txt")
devtools::load_all()
export <- ds2json_batch()
dhead(OBI)
head(OBI)
head(ERO)
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
get(OBI, envir = .GlobalEnv)
get("OBI", envir = .GlobalEnv)
ontology <- get("OBI", envir = .GlobalEnv)
head(ontology)
proteomics <- fromJSON("https://test-resourcebrowser.azurewebsites.net/api/v2/p_Resource/GetResource/5caee974-cc09-11e7-b8c5-c5f835ee25ab")
str(proteomics)
RCurl::getURL("http://dev-resourcebrowser2.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset")
fromJSON("http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/Proteomics")
export <- ds2json_batch()
O <- list(OBI, NCBITAXON, GO, ERO, DOID, CLO, CL, Cellosaurus)
usethis::use_data(O)
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
head(Cellosaurus)
head(ERO)
head(OBI)
devtools::load_all()
export <- ds2json_batch()
check()
devtools::check()
devtools::check()
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
head(GO)
lapply(O, function(x) names(x))
O[["CVCL"]]
O[["OBI"]]
devtools::load_all()
O[["OBI"]]
O <- list(OBI = OBI, NCBITAXON = NCBITAXON, GO = GO, ERO = ERO, DOID = DOID, CLO = CLO, CL = CL, Cellosaurus = Cellosaurus)
usethis::use_data(O, overwrite = T)
devtools::load_all()
export <- ds2json_batch()
O[["OBI"]][Name == "RNA-seq"]
O[["OBI"]][Name == "RNA-seq" | ID == "OBI_0001271"]
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
head(dt)
ds <- system.file("Curated/Ds.txt", package = "Sourcery")
ds <- fread(system.file("Curated/Ds.txt", package = "Sourcery"))
rm(O)
d1 <- ds[1, ]
d1
map2O(id = d1$OBI_ERO)
ds <- srctable
srctable <- ds
pmids <- as.character(srctable$DefiningManuscriptId)
authors <- PMID2Authors(pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x$Name, function(y) grep(y, HIRNauthors))))
names(whichHIRN) <- pmids
authCount <- lengths(whichHIRN)
notHIRN <- srctable[!authCount, ]
srctable <- srctable[as.logical(authCount), ]
dsjson <- fromJSON("http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/Proteomics")
dscat <- lapply(resourceTypes$ResourceTypes[[2]]$SubResourceTypes, function(x) x[resourceSchema])
rlist <- lapply(apply(srctable, 1, as.list), function(x) ds2json(x, dsjson, dscat, batch))
apply(srctable, 1, as.list)
test <- apply(srctable, 1, as.list)
test[[1]]
ds2json(test[[1]], dsjson, dscat, batch)
map2O(ds[1, OBI_ERO])
map2O(id = ds[1, OBI_ERO])
test[[1]]$OBI_ERO
test[[1]]$OBI_ERO
test[[1]]$OBI_ERO
test[[1]]$OBI_ERO
test[[1]]$OBI_ERO
test[[1]]$OBI_ERO
names(ds)
ds2json(test[[1]], dsjson, dscat, batch = "4")
d <- d1
rm(d1)
lapply(unlist(strsplit(d$Species, sep)), map2O(name = x, ontology = "NCBITAXON"))
names(O)
map2O(name = "human", ontology = "NCBITAXON")
unlist(strsplit(d$Species, "|"))
d$Species
strsplit(d$Species, "|")
devtools::load_all()
devtools::load_all()
devtools::load_all()
export <- ds2json_batch()
ds2json(d, dsjson, dscat, batch)
sep = "|"
unlist(strsplit(d$GOTerm, sep, fixed = T))
unlist(strsplit(d$DOIDTerm, sep, fixed = T))
unlist(strsplit(d$CellTissue, sep, fixed = T))
unlist(strsplit(d$CellLine, sep, fixed = T))
unlist(strsplit(d$Species, sep, fixed = T))
lapply(unlist(strsplit(d$Species, sep, fixed = T)), map2O(name = x, ontology = "NCBITAXON"))
devtools::load_all()
export <- ds2json_batch()
whichHIRN[[1]]
Persons[[1]]
devtools::load_all()
export <- ds2json_batch()
devtools::load_all()
export <- ds2json_batch()
export <- ds2json_batch(batch = "4")
dscat[[NA]]
dscat[[1]]
dscat[[2]]
dscat[[3]]
dscat[[4]]
dscat[[5]]
devtools::load_all()
export <- ds2json_batch(batch = "4")
dsValidator <- createValidator("Proteomics")
createValidator("Proteomics")
Show Traceback
Rerun with Debug
createValidator("Proteomics")
jsonvalidate::json_validator(RCurl::getURL("http://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset"))
getURL("http://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset")
RCurl::getURL("http://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset")
RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset")
createValidator <- function(type) {
switch(type,
## Antibody
Antibody = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Antibody?resourceType=BioReagent")),
## Cell types:
CellLine = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/CellLine?resourceType=BioReagent")),
DifferentiatedCell = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/DifferentiatedCell?resourceType=BioReagent")),
PrimaryCell = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/PrimaryCell?resourceType=BioReagent")),
StemCell = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/StemCell?resourceType=BioReagent")),
## Model Org
ModelOrganism = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/ModelOrganism?resourceType=BioReagent")),
## Database types (schemas for Proteomics, Genomics, etc., are actually interchangeable, so just use Proteomics):
Proteomics = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Proteomics?resourceType=Dataset")),
## Technology
Assay = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Assay?resourceType=Technology")),
CodePipeline = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/CodePipeline?resourceType=Technology")),
DeviceEquipment = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/DeviceEquipment?resourceType=Technology")),
Service = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/Service?resourceType=Technology")),
SoftwareDb = jsonvalidate::json_validator(RCurl::getURL("https://test-resourcebrowser.azurewebsites.net/api/v1.0/Schema/GetSchema/SoftwareDb?resourceType=Technology"))
)
}
test <- createValidator("Proteomics")
useValidator <- function(x, validator) {
sapply(x, validator)
}
useValidator(export$passed, test)
export$passed[[1]]
devtools::load_all()
export <- ds2json_batch(batch = "4")
useValidator(export$passed, test)
export[[1]]
export[[1]]
export$passed[[1]]
getwd()
write(export$passed[[1]], "ds1.json")
devtools::load_all()
export <- ds2json_batch(batch = "4")
devtools::load_all()
export <- ds2json_batch(batch = "4")
useValidator(export$passed, test)
export$passed[[1]]
write(export$passed[[1]], "ds1.json")
devtools::load_all()
export <- ds2json_batch(batch = "4")
useValidator(export$passed, test)
write(export$passed[[1]], "ds1.json")
devtools::load_all()
export <- ds2json_batch(batch = "4")
write(export$passed[[1]], "ds1.json")
useValidator(export$passed, test)
devtools::load_all()
export <- ds2json_batch(batch = "4")
useValidator(export$passed, test)
setwd("~/HIRN/Sourcery/inst/Curated/Datasets")
for(i in seq_along(export$passed)) write(i, file = paste0(i, ".json"))
for(i in seq_along(export$passed)) write(i, file = paste0(export$passed[[i]], ".json"))
for(i in seq_along(export$passed)) write(export$passed[[i]], file = paste0(i, ".json"))
8*3
8*4
28/3
28/4
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
devtools::load_all()
exported <- tech2json_batch(batch = "4")
devtools::load_all()
exported <- tech2json_batch(batch = "4")
val <- createValidator("Assay")
str(exported)
or(i in seq_along(exported$passed)) print(exported$passed[[tech$Type[i]]]
for(i in seq_along(exported$passed)) print(exported$passed[[tech$Type[i]]]
)
for(i in seq_along(exported$passed)) exported$passed[[tech$Type[i]]]
for(i in seq_along(exported$passed)) exported$passed[[Type]]
for(i in seq_along(exported$passed)) exported$passed[i]$Type
for(i in seq_along(exported$passed)) print(exported$passed[i]$Type)
exported$needreview
length(exported$passed)
nrow(exported$needreview)
!9
head(HIRN)
file = system.file("Curated/Tech.txt", package = "Sourcery")
srctable <- fread(file)
whichHIRN <- authorCheck(srctable)
authorCheck <- function(srctable) {
pmids <- as.character(srctable$DefiningManuscriptId)
authors <- PMID2Authors(pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x$Name, function(y) grep(y, HIRNauthors))))
names(whichHIRN) <- pmids
return(whichHIRN)
}
whichHIRN <- authorCheck(srctable)
authcounts <- lengths(whichHIRN)
authcounts
srctable[!authcounts, ]
srctable[as.logical(authcounts), ]
srctable[!as.logical(authcounts), ]
HIRNauthors
grep("Rosenfield", HIRNauthors, value = T)
grep("Wenzhao", HIRNauthors, value = T)
grep("Prak", HIRNauthors, value = T)
grep("Meng", HIRNauthors, value = T)
grep("Hershberg", HIRNauthors, value = T)
devtools::load_all()
rm(exported)
export <- tech2json_batch(batch = "4")
devtools::load_all()
export <- tech2json_batch(batch = "4")
lengths(export$passed)
length(export$passed)
length(export$needreview)
nrow(export$needreview)
