column(2,
HTML("<strong>You are matching on</strong>"),
verbatimTextOutput("matchOn", placeholder = TRUE),
actionButton("match", "Match")),
column(8,
uiOutput("matchParameters")
))
)
runApp('nPOD/nPOD-App/DIVE')
removeUI("#matchUI", immediate = T)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
fluidPage(fluidRow(
column(1,
br(),
actionButton("guideMatch", "Guide", icon = icon("info-circle"))
),
column(1,
h3("CohortX"),
helpText("(your cohort)")
),
column(2,
div(id = "cohortInput",
textInput("cohortName", "Your cohort name/label (optional)", value = "", placeholder = "e.g. 'DiViD', 'pilot'.."),
fileInput("cohortDataUpload",  HTML("<strong>Upload data to begin</strong>"), multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv"),
buttonLabel = "Data")
)
),
column(1,
br(),
checkboxInput("outsideCohort", "non-nPOD cohort", value = T),
br(),
br(),
actionLink("cohortDataRequirements", icon = icon("exclamation"), "Data requirements")
),
column(1
),
column(6
)),
fluidRow(
column(1
),
column(1, style="border-top: 1px solid lightgray;",
br(),
h3("nPOD")
),
column(2, style="border-top: 1px solid lightgray;",
br(),
div(id = "nPODInput",
selectInput("matchType", "Type of matches to get from nPOD",
choices = list("No diabetes (negative control)" = c(`No-diabetes donors` = "ND"),
"T1D (positive control)" = c(`T1D donors` = "T1D"),
"Other" = c(`T2D donors` = "T2D", `Autoantibody-positive donors` = "AAb")))
)
),
column(2),
column(6,
div(id = "npodgraph", style="margin-top: -220px; z-index: 0; height: 500px;", plotlyOutput("npodgraph")),
div(style="position: absolute; margin-top: -200px; margin-left: -140px; top:0; left:0; z-index: 1;",
plotlyOutput("nPie"))
)),
fluidRow(
column(1),
column(11, style="padding-top: 20px;",
uiOutput("matchUI")
)
),
fluidRow(style="margin-top: 20px; padding-bottom: 50px;",
column(5, style="padding-right: 50px;",
uiOutput("matchResult")
),
column(3,
uiOutput("advancedMatchResult")
),
column(4,
uiOutput("advancedMatchResult2")
)
)
)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
ggplot()
library(ggplot)
library(ggplot2)
ggplot()
load("~/Documents/Met/wgcna.Rdata")
shiny::runApp('nPOD/nPOD-App/app')
runApp('nPOD/nPOD-App/app')
max(c(NA, 1, 2, 3))
NA > 5
NA >= 5
1:5[c(NA, 3, 5)]
c(NA, 3, 5, 3, 4, 5) > 3
test <- data.frame(x = 1:3, y = 3:1)
ggplot(test) + geom_point()
runApp('nPOD/nPOD-App/Test-dev/match')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
setwd("~/HIRN/Sourcery")
devtools::load_all()
export <- tech2json_batch(batch =  "4")
devtools::load_all()
export <- tech2json_batch(batch =  "4")
devtools::load_all()
export <- tech2json_batch(batch =  "4")
unique(export$srctable$Type)
for(type in unique(export$srctable$Type)) {
match(type, export$srctable$Type)
}
validated <- list()
for(type in unique(export$srctable$Type)) {
validated[[type]] <- match(type, export$srctable$Type)
}
validated
for(type in unique(export$srctable$Type)) {
validated[[type]] <- which(export$srctable$Type %in% type)
}
validated
devtools::load_all()
devtools::load_all()
export <- tech2json_batch(batch =  "4")
length(export$passed)
validated <- list()
for(type in unique(export$srctable$Type)) {
hastype <- which(export$srctable$Type %in% type)
jsonlist <- export$passed[hastype]
validated[[type]] <- batchValidator(jsonlist, type)
}
batchValidator <- function(jsonlist, type) {
Val <- createValidator(type)
result <- useValidator(jsonlist, Val)
return(result)
}
for(type in unique(export$srctable$Type)) {
hastype <- which(export$srctable$Type %in% type)
jsonlist <- export$passed[hastype]
validated[[type]] <- batchValidator(jsonlist, type)
}
validated
which(export$srctable$Type %in% "Assay")
export$passed[[1]]
jsonlist <- split(export$passed, f = export$srctable$Type)
names(jsonlist)
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
validated
jsonlist$SoftwareDb[[1]]
jsonlist$SoftwareDb[[2]]
OBI[ID == "OBI_0200175"]
strsplit("test", "|", fixed = T)
strsplit("test", "|", fixed = T)[[1]]
export <- tech2json_batch(batch =  "4")
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
validated
jsonlist$Assay[[1]]
x <- OBI[ID == "OBI_0200175"]
x
mapped <- x
rm(x)
boiler(OntologyId = ontology, CanonicalId = mapped$IRI, Url = mapped$IRI, Name = mapped$Name)
boiler(OntologyId = "OBI", CanonicalId = mapped$IRI, Url = mapped$IRI, Name = mapped$Name)
map2O(id = "ERO_0001309")
gsub("_.*", "", "ERO_0001309")
names(O)
t <- export$srctable[1, ]
t
devtools::load_all()
jsonlist <- split(export$passed, f = export$srctable$Type)
export <- tech2json_batch(batch =  "4")
strsplit("", "|", fixed = T)
gsub("_.*", "", "")
gsub("_.*", "", character(0))
character(0) == ""
boiler()
length(NULL)
devtools::load_all()
export <- tech2json_batch(batch =  "4")
devtools::load_all()
export <- tech2json_batch(batch =  "4")
devtools::load_all()
lapply(list(), function(x) x)
lapply(character(0), function(x) x)
t
devtools::load_all()
export <- tech2json_batch(batch =  "4")
srctable <- fread(file, na.strings = "")
file = system.file("Curated/Tech.txt", package = "Sourcery")
srctable <- fread(file, na.strings = "")
scrtable
srctable
srctable <- fread(file, na.strings = NULL)
srctable
export <- tech2json_batch(batch =  "4")
strsplit(t$Dependencies, "|", fixed = T)
lapply(strsplit(t$Dependencies, "|", fixed = T), function(x) map2O(id = x)
)
lapply(strsplit(t$Dependencies, "|", fixed = T)[[1]], function(x) map2O(id = x))
devtools::load_all()
export <- tech2json_batch(batch =  "4")
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
validated
jsonlist$SoftwareDb[[2]]
HIRNauthors
check <- authorCheck(export$srctable)
names(check)
lengths(check)
check[["PMID29238404"]]
Persons[140]
jsonlist$SoftwareDb[[2]]
OBI[ID == "OBI_0002587"]
setwd("~/Downloads")
obi <- fread("OBI.csv.gz")
install.packages('R.utils')
obi <- fread("OBI.csv.gz")
head(obi)
names(obi)
names(OBI)
head(OBI)
obi <- obi[, .(`Preferred Label`, `Class ID`, Synonyms)]
head(obi)
setnames(obi, c("Name", "IRI", "Synonyms"))
obi[, ID := gsub("http://purl.obolibrary.org/obo/", "", IRI)]
head(obi)
O[["OBI"]] <- copy(obi)
setwd("~/HIRN/Sourcery")
usethis::use_data(O, overwrite = T)
devtools::load_all()
export <- tech2json_batch(batch =  "4")
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
valdiated
validated
setwd("~/HIRN/Sourcery/inst/Curated/Technology")
validated <- unlist(validated)
validated
test <- unlist(jsonlist)
test[1]
jsonlist <- unlist(jsonlist)
rm(test)
for(i in seq_along(jsonlist)) write(jsonlist[i], file = paste0(i, ".json"))
Persons <- fromJSON(system.file("extdata/ResourceBrowser/codedValues.json", package = "Sourcery"), simplifyVector = F)
Persons <- fromJSON(system.file("extdata/ResourceBrowser/contrib.json", package = "Sourcery"), simplifyVector = F)
names(Persons)
Persons[[1]]
length(Persons)
usethis::use_data(Persons, overwrite = T)
codedValues
devtools::load_all()
export <- ds2json_batch(batch = "4")
devtools::load_all()
export <- ds2json_batch(batch = "4")
HIRNauthors <- sapply(Persons, function(x) paste(x$LastName, x$FirstName))
HIRNauthors[HIRNauthors == "Powers Al"] <- "Powers Alvin"
usethis::use_data(HIRNauthors, overwrite = T)
devtools::load_all()
export <- ds2json_batch(batch = "4")
batchValidator(export$passed, "Proteomics")
validated <- batchValidator(export$passed, "Proteomics")
export$passed[[!validated]]
export$passed[!validated]
devtools::load_all()
export <- ds2json_batch(batch = "4")
validated <- batchValidator(export$passed, "Proteomics")
all(validated)
setwd("~/HIRN/Sourcery/inst/Curated")
setwd("~/HIRN/Sourcery/inst/Curated/Datasets")
for(i in seq_along(export$passed)) write(export$passed[[i]], paste0(i, ".json"))
export <- tech2json_batch(batch = "5")
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
apply(validated, all)
sapply(validated, all)
jsonlist <- unlist(jsonlist)
for(i in seq_along(jsonlist)) write(jsonlist[i], file = paste0(i, ".json"))
setwd("~/HIRN/Sourcery/inst/Curated/Technology")
for(i in seq_along(jsonlist)) write(jsonlist[i], file = paste0(i, ".json"))
export$needreview
grep("Stabler", HIRNauthors, value = T)
PMID2Authors("PMID30224090")
ds2json_batch <- function(srctable = NULL, file = system.file("Curated/Ds.txt", package = "Sourcery"), batch, authormatch = "Name") {
if(is.null(srctable)) srctable <- fread(file)
# find HIRN authors from list of authors for each publication
pmids <- as.character(srctable$DefiningManuscriptId)
authors <- PMID2Authors(pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x[[authormatch]], function(y) grep(y, HIRNauthors))))
names(whichHIRN) <- pmids
authCount <- lengths(whichHIRN)
notHIRN <- srctable[!authCount, ]
srctable <- srctable[as.logical(authCount), ]
# get latest template
dsjson <- fromJSON("http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/Proteomics")
dscat <- lapply(resourceTypes$ResourceTypes[[2]]$SubResourceTypes, function(x) x[resourceSchema])
Cellomics <- dscat[[1]]
Cellomics$TargetClassType
Cellomics$id <- Cellomics$CanonicalId <- "HIRN-Ds-Cell"
dscat[[6]] <- Cellomics
rlist <- lapply(apply(srctable, 1, as.list), function(x) ds2json(x, dsjson, dscat, batch = batch, HIRN = whichHIRN))
result <- list(passed = rlist, needreview = notHIRN)
return(result)
}
manual <- ds2json_batch(srctable = export$needreview[1, ], authormatch = "LastName")
export$needreview[1, ]
ds2json_batch <- function(srctable = NULL, file = system.file("Curated/Ds.txt", package = "Sourcery"), authormatch = "Name", batch) {
if(is.null(srctable)) srctable <- fread(file)
# find HIRN authors from list of authors for each publication
pmids <- as.character(srctable$DefiningManuscriptId)
authors <- PMID2Authors(pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x[[authormatch]], function(y) grep(y, HIRNauthors))))
names(whichHIRN) <- pmids
authCount <- lengths(whichHIRN)
notHIRN <- srctable[!authCount, ]
srctable <- srctable[as.logical(authCount), ]
# get latest template
dsjson <- fromJSON("http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/Proteomics")
dscat <- lapply(resourceTypes$ResourceTypes[[2]]$SubResourceTypes, function(x) x[resourceSchema])
Cellomics <- dscat[[1]]
Cellomics$TargetClassType
Cellomics$id <- Cellomics$CanonicalId <- "HIRN-Ds-Cell"
dscat[[6]] <- Cellomics
rlist <- lapply(apply(srctable, 1, as.list), function(x) ds2json(x, dsjson, dscat, batch = batch, HIRN = whichHIRN))
result <- list(passed = rlist, needreview = notHIRN)
return(result)
}
manual <- ds2json_batch(srctable = export$needreview[1, ], authormatch = "LastName", batch = "5")
O[["OBI"]][ID == "OBI_0600024"]
O[["ERO"]][ID == "ERO_0000957"]
export$needreview[1, ]
O[["NCBITAXON"]]
authorCheck <- function(srctable, matchby = "Name") {
pmids <- as.character(srctable$DefiningManuscriptId)
authors <- PMID2Authors(pmids)
whichHIRN <- lapply(authors, function(x) unlist(sapply(x[[matchby]], function(y) grep(y, HIRNauthors))))
names(whichHIRN) <- pmids
return(whichHIRN)
}
tech2json_batch <- function(srctable = NULL, file = system.file("Curated/Tech.txt", package = "Sourcery"), authormatch = "Name", batch) {
if(is.null(srctable)) srctable <- fread(file, na.strings = NULL)
whichHIRN <- authorCheck(srctable, matchby = authormatch)
authcounts <- lengths(whichHIRN)
notHIRN <- srctable[!as.logical(authcounts), ]
srctable <- srctable[as.logical(authcounts), ]
# get latest templates
techjson <- lapply(c("http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/Assay",
"http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/CodePipeline",
"http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/DeviceEquipment",
"http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/Service",
"http://test-resourcebrowser.azurewebsites.net/api/v1.0/AdminResource/GetNew/SoftwareDb"
), fromJSON)
names(techjson) <- c("Assay", "CodePipeline", "DeviceEquipment", "Service", "SoftwareDb")
# Go through table
rlist <- lapply(apply(srctable, 1, as.list), function(t) tech2json(t, t$Type, techjson, batch = batch, HIRN = whichHIRN))
result <- list(passed = rlist, srctable = srctable, needreview = notHIRN)
return(result)
}
manual <- export$needreview[1, ]
manual <- ds2json_batch(srctable = manual, authormatch = "LastName", batch = "5")
manual <- tech2json_batch(srctable = manual, authormatch = "LastName", batch = "5")
manual
batchValidator(manual$passed, "DeviceEquipment")
export$passed <- c(export$passed, manual$passed)
length(export$passed)
for(i in seq_along(export$passed)) write(export$passed[i], file = paste0(i, ".json"))
for(i in seq_along(export$passed)) write(export$passed[[i]], file = paste0(i, ".json"))
devtools::load_all()
export <- tech2json_batch(batch = "5")
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
validated
export$passed[[1]]
substr("test", 1, 0)
devtools::load_all()
devtools::load_all()
export <- tech2json_batch(forenamechars = 1, batch = "5")
length(export$passed)
export <- tech2json_batch(forenamechars = 0, batch = "5")
length(export$passed)
export$passed[[1]]
grep("Stabler", "HIRNauthors")
grep("Stabler", HIRNauthors)
file = system.file("Curated/Tech.txt", package = "Sourcery")
srctable <- fread(file, na.strings = NULL)
whichHIRN <- authorCheck(srctable, forenamechars = 3)
authcounts <- lengths(whichHIRN)
authcounts
whichHIRN[[1]]
whichHIRN <- authorCheck(srctable, forenamechars = 0)
authcounts  <- lengths(whichHIRN)
authcounts
whichHIRN[["PMID30843680"]]
whichHIRN <- authorCheck(srctable, forenamechars = 1)
authcounts  <- lengths(whichHIRN)
authcounts
whichHIRN[["PMID30224090"]]
grep("Patel", HIRNauthors, val = T)
export <- tech2json_batch(forenamechars = 1, batch = "5")
length(export$passed)
devtools::load_all()
export <- tech2json_batch(forenamechars = 1, batch = "5")
length(export$passed)
export$needreview
whichHIRN <- authorCheck(srctable, forenamechars = 1)
authcounts <- lengths(whichHIRN)
authcounts
devtools::load_all()
export <- tech2json_batch(forenamechars = 1, batch = "5")
length(export$passed)
export$passed[[1]]
devtools::load_all()
export <- tech2json_batch(forenamechars = 1, batch = "5")
length(export$passed)
export$passed[[1]]
whichHIRN
Persons[[69]]
devtools::load_all()
export <- tech2json_batch(forenamechars = 1, batch = "5")
length(export$passed)
jsonlist <- split(export$passed, f = export$srctable$Type)
validated <- mapply(batchValidator, jsonlist, names(jsonlist))
validated
jsonlist <- unlist(jsonlist)
for(i in seq_along(jsonlist)) write(jsonlist[i], file = paste0(i, ".json"))
