1; 2; 3; 4; 5; 6; 7; 8
A [label = 'Methods text']
# 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
{S1, S2}->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
{S1 S2}->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
S1->M1 S2->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
S1->M1 S2->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get data for Antibody Registry']
# 'edge' statements
S1->M1 S2->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get data for Antibody Registry']
# 'edge' statements
{S1 S2}->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get common data from AbRegistry']
M3 [label = 'Populate properties programmatically']
M4 [label = 'Check and fill in properties manually']
E1 [label = 'To JSON']
E2 [label = 'Validate JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1 E1->E2
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Get data from AbRegistry']
M3 [label = 'Populate properties programmatically']
M4 [label = 'Check and fill in properties manually']
E1 [label = 'To JSON']
E2 [label = 'Validate JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1 E1->E2
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Get data from AbRegistry']
M3 [label = 'Populate properties']
M4 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M3 [label = 'Populate properties with DB sources and API']
M4 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Technology_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
M4 [label = 'Register technology if appropriate']
M5 [label = 'Update record with RRID']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->M4 M4->M5 M5->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods/Supplemental text']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
node [shape = circle,
fontname = Helvetica]
S1
S1 [label = 'Methods/Supplemental text']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods/Supplemental text', shape = oval]
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text', shape = oval]
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Technology_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Abstract/Discussion/full text', shape = oval]
M3 [label = 'Check and fill in properties manually']
M4 [label = 'Register technology if appropriate']
M5 [label = 'Update record with RRID']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->M4 M4->M5 M5->E1
}
")
shiny::runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
sample(c("Yes", "No"), size = 94, replace = T)
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
install.packages("sourcetools")
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
setwd("~/DIVE")
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
setwd("~/nPOD")
test <- fread("divid.csv")
sapply(test, class)
notID <- removeID(names(test))
notID
isNumeric <- sapply(test[, notID, with = F], function(x) class(x) %in% c("numeric", "integer"))
isNumeric
notID[!isNumeric]
paste(notID)
paste(notID[!isNumeric])
paste(notID[!isNumeric], collapse = ", ")
paste("There is no ID column.", notID[!isNumeric], collapse = ", ")
setwd("~/DIVE")
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
paste(notID[!isNumeric], collapse = "\n")
cat(paste(notID[!isNumeric], collapse = "\n"))
devtools::load_all()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
cdata$ID[FALSE]
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
matchAppRun()
devtools::load_all()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
cdata[donor.type == "No diabetes"]
cdata[donor.type == "No diabetes", ID]
cdata[donor.type == "No diabetes", .(ID, sex, bmi, HbA1c, GADA.pos, ZnT8A.pos]
cdata[donor.type == "No diabetes", .(ID, sex, bmi, HbA1c, GADA.pos, ZnT8A.pos)][1:5]
cdata[donor.type == "No diabetes", .(ID, sex, BMI, HbA1c, GADA.pos, ZnT8A.pos)][1:5]
cdata[donor.type == "No diabetes", .(ID, age, sex, BMI, HbA1c, GADA.pos, ZnT8A.pos)][1:5]
devtools::load_all()
matchAppRun()
class(cdata$ID
)
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
devtools::load_all()
matchAppRun()
matchAppRun()
devtools::load_all()
matchAppRun()
runApp('inst')
runApp('inst')
devtools::load_all()
runApp('inst')
devtools::load_all()
runApp('inst')
devtools::load_all()
matchAppRun()
runApp('inst')
devtools::load_all()
matchAppRun()
runApp('inst')
setwd("~/HIRN/Sourcery")
setwd("~/HIRN/Sourcery")
ui <- fluidPage(theme = shinythemes::shinytheme("paper"),
includeCSS(system.file("www/", "styles.css", package = "Sourcery")),
fileInput("file", "Antibody List", placeholder = "  no file selected"), br(),
radioButtons("section", "Section", choices = c("Properties", "Usage"), inline = T),
antibodyBatchInput(6)
)
modAntibody(0)
1.5 * 17
